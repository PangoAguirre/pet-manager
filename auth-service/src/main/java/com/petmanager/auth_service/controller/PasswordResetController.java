package com.petmanager.auth_service.controller;

import com.petmanager.auth_service.service.PasswordResetService;
import com.petmanager.auth_service.repository.UserRepository;
import com.petmanager.auth_service.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

import java.util.Optional;

@RestController
@RequestMapping("/password")
@Slf4j
public class PasswordResetController {

    @Autowired
    private PasswordResetService resetService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Endpoint para solicitar el token de recuperaci√≥n con plantilla HTML elegante
     */
    @PostMapping("/request-reset")
    public ResponseEntity<?> requestReset(@RequestBody Map<String, String> request) {
        String email = request.get("email");

        log.info("üîê Solicitud de recuperaci√≥n de contrase√±a recibida");
        log.info("   üìß Email: {}", email);

        if (email == null || email.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è Solicitud sin email");
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "El email es requerido"
            ));
        }

        try {
            resetService.createPasswordResetToken(email.trim().toLowerCase());

            log.info("‚úÖ Proceso de recuperaci√≥n iniciado exitosamente para: {}", email);

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "Se envi√≥ un correo con el enlace para restablecer la contrase√±a.",
                    "details", "Revisa tu bandeja de entrada y spam. El enlace es v√°lido por 1 hora."
            ));

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Error de validaci√≥n en recuperaci√≥n: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", e.getMessage()
            ));

        } catch (Exception e) {
            log.error("üí• Error interno en recuperaci√≥n: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Error interno del servidor. Intente nuevamente."
            ));
        }
    }

    /**
     * Endpoint para restablecer la contrase√±a con el token
     */
    @PostMapping("/reset")
    public ResponseEntity<?> resetPassword(@RequestBody Map<String, String> request) {
        String token = request.get("token");
        String newPassword = request.get("newPassword");

        log.info("üîÑ Solicitud de restablecimiento de contrase√±a recibida");
        log.info("   üîë Token: {}...", token != null ? token.substring(0, 8) : "null");

        // Validaciones de entrada
        if (token == null || token.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è Token vac√≠o en restablecimiento");
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Token es requerido"
            ));
        }

        if (newPassword == null || newPassword.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è Contrase√±a vac√≠a en restablecimiento");
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "La nueva contrase√±a es requerida"
            ));
        }

        // Validar fortaleza de contrase√±a
        if (!isValidPassword(newPassword)) {
            log.warn("‚ö†Ô∏è Contrase√±a no cumple criterios de seguridad");
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "La contrase√±a debe tener al menos 7 caracteres, una letra may√∫scula y un car√°cter especial."
            ));
        }

        try {
            // Validar token y obtener usuario
            Long userId = resetService.validateToken(token.trim());

            Optional<User> optionalUser = userRepository.findById(userId);
            if (optionalUser.isEmpty()) {
                log.error("‚ùå Usuario no encontrado con ID: {}", userId);
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "Usuario no encontrado."
                ));
            }

            User user = optionalUser.get();
            log.info("üë§ Restableciendo contrase√±a para usuario: {} (ID: {})", user.getNombre(), user.getId());

            // Verificar que el usuario est√© activo
            if (!user.isActivo()) {
                log.warn("‚ö†Ô∏è Intento de restablecimiento para usuario inactivo: {}", user.getEmail());
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "La cuenta est√° desactivada. Contacte al administrador."
                ));
            }

            // Actualizar contrase√±a
            user.setPassword(passwordEncoder.encode(newPassword));
            userRepository.save(user);

            // Invalidar token
            resetService.invalidateToken(token.trim());

            log.info("‚úÖ Contrase√±a restablecida exitosamente para usuario: {}", user.getEmail());

            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "Contrase√±a actualizada correctamente.",
                    "details", "Ya puedes iniciar sesi√≥n con tu nueva contrase√±a."
            ));

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Error de validaci√≥n en restablecimiento: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", e.getMessage()
            ));

        } catch (Exception e) {
            log.error("üí• Error interno en restablecimiento: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Error interno del servidor. Intente nuevamente."
            ));
        }
    }

    /**
     * Endpoint para validar token (√∫til para el frontend)
     */
    @GetMapping("/validate")
    public ResponseEntity<?> validateToken(@RequestParam String token) {
        log.info("üîç Validaci√≥n de token solicitada: {}...", token.substring(0, 8));

        if (token == null || token.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of(
                    "valid", false,
                    "message", "Token es requerido"
            ));
        }

        try {
            Long userId = resetService.validateToken(token.trim());

            // Obtener informaci√≥n b√°sica del usuario
            Optional<User> optionalUser = userRepository.findById(userId);
            if (optionalUser.isPresent()) {
                User user = optionalUser.get();

                log.info("‚úÖ Token v√°lido para usuario: {}", user.getEmail());

                return ResponseEntity.ok(Map.of(
                        "valid", true,
                        "message", "Token v√°lido",
                        "userEmail", user.getEmail(),
                        "userName", user.getNombre()
                ));
            } else {
                log.warn("‚ö†Ô∏è Token v√°lido pero usuario no encontrado");
                return ResponseEntity.badRequest().body(Map.of(
                        "valid", false,
                        "message", "Usuario no encontrado"
                ));
            }

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Token inv√°lido: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "valid", false,
                    "message", e.getMessage()
            ));

        } catch (Exception e) {
            log.error("üí• Error validando token: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "valid", false,
                    "message", "Error interno del servidor"
            ));
        }
    }

    /**
     * Valida que la contrase√±a cumple los criterios de seguridad
     */
    private boolean isValidPassword(String password) {
        return password.length() >= 7 &&
                password.matches(".*[A-Z].*") &&
                password.matches(".*[^a-zA-Z0-9].*");
    }
}
